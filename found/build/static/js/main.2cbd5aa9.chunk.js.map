{"version":3,"sources":["Title.jsx","Myform.jsx","App.js","serviceWorker.js","index.js"],"names":["Title","className","React","Component","Myform","props","state","lostitem","name","time","location","contact","desc","handleChange","bind","handleSubmit","event","target","value","this","setState","alert","preventDefault","onSubmit","type","onChange","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mQAYeA,E,iLARX,OACE,yBAAKC,UAAW,gBACd,gD,GAJYC,IAAMC,W,2lBCmEXC,E,YAlEX,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,SACE,CAAEC,KAAM,GAAIC,KAAM,GAAIC,SAAU,GAAIC,QAAS,GAAIC,KAAM,KAG3D,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBARH,E,0EAWNE,GACX,IAAMC,EAASD,EAAMC,OACfC,EAAQD,EAAOC,MACfV,EAAOS,EAAOT,KACpBW,KAAKC,SAAS,CACZb,SAAS,EAAD,GACHY,KAAKb,MAAMC,SADR,eAELC,EAAOU,Q,mCAIDF,GACXK,MAAM,kDAAyDF,KAAKb,MAAMC,SAASC,KACnF,qBAA4BW,KAAKb,MAAMC,SAASG,SAAW,iBAC1CS,KAAKb,MAAMC,SAASE,KAAO,0BAClBU,KAAKb,MAAMC,SAASI,QAAU,2BAC7BQ,KAAKb,MAAMC,SAASK,MAC/CI,EAAMM,mB,+BAIN,OACE,0BAAMC,SAAUJ,KAAKJ,aAAcd,UAAU,WAC3C,6BACE,4CACY,6BACV,2BAAOuB,KAAK,OAAOhB,KAAK,OAAOU,MAAOC,KAAKb,MAAMC,SAASC,KAAMiB,SAAUN,KAAKN,gBACzE,6BACR,2CACW,6BACT,2BAAOW,KAAK,OAAOhB,KAAK,WAAWU,MAAOC,KAAKb,MAAMC,SAASG,SAAUe,SAAUN,KAAKN,iBAG3F,6BACE,6CACa,6BACX,2BAAOW,KAAK,OAAOhB,KAAK,OAAOU,MAAOC,KAAKb,MAAMC,SAASE,KAAMgB,SAAUN,KAAKN,gBACzE,6BACR,gDACgB,6BACd,2BAAOW,KAAK,OAAOhB,KAAK,UAAUU,MAAOC,KAAKb,MAAMC,SAASI,QAASc,SAAUN,KAAKN,iBAGzF,6BACA,wDACwB,6BACtB,8BAAUL,KAAK,OAAOU,MAAOC,KAAKb,MAAMC,SAASK,KAAMa,SAAUN,KAAKN,gBAChE,6BACR,2BAAOZ,UAAU,SAASuB,KAAK,SAASN,MAAM,gB,GA5DnChB,IAAMC,WCeZuB,G,uLATX,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALUxB,IAAMC,YCMJwB,QACW,cAA7BC,OAAOlB,SAASmB,UAEe,UAA7BD,OAAOlB,SAASmB,UAEhBD,OAAOlB,SAASmB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2cbd5aa9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Title extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className =\"center-align\">\r\n        <h1>Report Form</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Title;\r\n","import React from 'react';\r\n\r\nclass Myform extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        lostitem:\r\n          { name: '', time: '', location: '', contact: '', desc: '' }\r\n        };\r\n  \r\n      this.handleChange = this.handleChange.bind(this);\r\n      this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n      const target = event.target;\r\n      const value = target.value;\r\n      const name = target.name;\r\n      this.setState({\r\n        lostitem: {\r\n          ...this.state.lostitem,\r\n          [name]: value}\r\n      });\r\n    }\r\n  \r\n    handleSubmit(event) {\r\n      alert(\"You success report the lost item! \\n\" + \"Item name: \" + this.state.lostitem.name +\r\n      \"\\n\" + \"Found location: \" + this.state.lostitem.location + \"\\n\" +\r\n      \"Found time: \" + this.state.lostitem.time + \"\\n\" +\r\n      \"Contact information: \" + this.state.lostitem.contact + \"\\n\" +\r\n      \"Detailed description: \" + this.state.lostitem.desc);\r\n      event.preventDefault();\r\n    }\r\n\r\n    render() {\r\n      return (\r\n        <form onSubmit={this.handleSubmit} className=\"mix-box\">\r\n          <div>\r\n            <label>\r\n              Item Name:<br/>\r\n              <input type=\"text\" name=\"name\" value={this.state.lostitem.name} onChange={this.handleChange}/>\r\n            </label><br/>\r\n            <label>\r\n              location:<br/>\r\n              <input type=\"text\" name=\"location\" value={this.state.lostitem.location} onChange={this.handleChange}/>\r\n            </label>\r\n          </div>\r\n          <div>\r\n            <label>\r\n              Found time:<br/>\r\n              <input type=\"text\" name=\"time\" value={this.state.lostitem.time} onChange={this.handleChange}/>\r\n            </label><br/>\r\n            <label>\r\n              Email/Contact:<br/>\r\n              <input type=\"text\" name=\"contact\" value={this.state.lostitem.contact} onChange={this.handleChange}/>\r\n            </label>\r\n          </div>\r\n          <br />\r\n          <label>\r\n            Detailed description: <br />\r\n            <textarea name=\"desc\" value={this.state.lostitem.desc} onChange={this.handleChange} />\r\n          </label><br/>\r\n          <input className=\"button\" type=\"submit\" value=\"Submit\" />\r\n        </form>\r\n      );\r\n    }\r\n  }\r\n  \r\n\r\nexport default Myform;\r\n  \r\n  ","import React from 'react';\nimport Title from './Title';\nimport Myform from './Myform';\nimport './App.css';\n\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <Title />\n        <Myform />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}