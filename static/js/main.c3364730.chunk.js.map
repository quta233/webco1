{"version":3,"sources":["Title.jsx","Item.jsx","Bar.jsx","Desc.jsx","Button.jsx","ImageItem.jsx","Image.jsx","App.js","serviceWorker.js","index.js"],"names":["Title","className","React","Component","Item","props","href","item","web","name","Bar","items","this","map","Desc","Button","action","type","placeholder","ImageItem","target","image","style","width","src","img","alt","text","Image","images","App","state","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+OAYeA,E,iLARX,OACE,yBAAKC,UAAW,mCACd,mD,GAJYC,IAAMC,WCQXC,EARF,SAAAC,GAAK,OAChB,4BACI,uBAAGC,KAAOD,EAAME,KAAKC,KAChBH,EAAME,KAAKE,QCWPC,E,iLAXX,IAAMC,EAAQC,KAAKP,MAAMM,MAAME,KAAI,SAAAN,GAAI,OAAI,kBAAC,EAAD,CAAMA,KAAMA,OACvD,OACI,yBAAKN,UAAW,yBACZ,4BACKU,Q,GANCT,IAAMC,WCKTW,E,iLAJX,OAAO,mF,GAFQZ,IAAMC,WCgBVY,E,iLAdX,OACI,6BACI,0BAAMC,OAAO,iBACb,uDAEI,2BAAOC,KAAK,OAAOC,YAAY,8BAC/B,4BAAQD,KAAK,UAAb,iB,GARKf,IAAMC,WCMZgB,EANG,SAAAd,GAAK,OACnB,uBAAGe,OAAO,SAASd,KAAOD,EAAMgB,MAAMb,KAClC,yBAAKc,MAAO,CAACC,MAAOlB,EAAMgB,MAAME,OAAQC,IAAKnB,EAAMgB,MAAMI,IAAKC,IAAKrB,EAAMgB,MAAMM,SCaxEC,E,iLAZX,IAAMC,EAASjB,KAAKP,MAAMwB,OAAOhB,KAAI,SAAAQ,GAAK,OAAI,kBAAC,EAAD,CAAWA,MAAOA,OAChE,OACI,yBAAKpB,UAAW,gCACZ,4CACA,6BACK4B,Q,GAPG3B,IAAMC,WCiCX2B,G,iNA3BbC,MAAQ,CACNpB,MAAO,CACL,CAAEF,KAAM,SAAUD,IAAK,KACvB,CAAEC,KAAM,SAAUD,IAAK,KACvB,CAAEC,KAAM,WAAYD,IAAK,KACzB,CAAEC,KAAM,OAAQD,IAAK,MAGvBqB,OAAQ,CACN,CAAEN,MAAO,IAAKE,IAAK,uJAAwJjB,IAAK,IAAKmB,KAAM,eAC3L,CAAEJ,MAAO,IAAKE,IAAK,yDAA0DjB,IAAK,IAAKmB,KAAM,kB,wEAK/F,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAKhB,MAAOC,KAAKmB,MAAMpB,QACvB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAOkB,OAAQjB,KAAKmB,MAAMF,c,GAtBhB3B,IAAMC,YCIJ6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c3364730.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Title extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className =\"center-align mix-box text-style\">\r\n        <h1>Lost And Found</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Title;\r\n","import React from 'react';\r\n\r\nconst Item = props => (\r\n  <li>\r\n      <a href= {props.item.web}>\r\n          {props.item.name}\r\n      </a>\r\n  </li>\r\n);\r\n\r\nexport default Item;\r\n","import React from 'react';\r\nimport Item from './Item';\r\n\r\nclass Bar extends React.Component {\r\n  render() {\r\n    const items = this.props.items.map(item => <Item item={item} />);\r\n    return(\r\n        <div className =\"center-align blue-box\">\r\n            <ul>\r\n                {items}\r\n            </ul>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Bar;\r\n","import React from 'react';\r\n\r\nclass Desc extends React.Component {\r\n  render() {\r\n    return <p>The lost and found website for oberlin students.</p>;\r\n  }\r\n}\r\n\r\nexport default Desc;\r\n","import React from 'react';\r\n\r\nclass Button extends React.Component {\r\n  render() {\r\n    return(\r\n        <div>\r\n            <form action=\"/dummy-server\">\r\n            <label>\r\n            Search for lost items\r\n                <input type=\"text\" placeholder=\"books, phones, keys, etc.\"/>\r\n                <button type=\"submit\">Search</button>\r\n            </label>\r\n            </form>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Button;\r\n","import React from 'react';\r\n\r\nconst ImageItem = props => (\r\n    <a target=\"_blank\" href= {props.image.web}>\r\n        <img style={{width: props.image.width}} src={props.image.img} alt={props.image.text}/>\r\n    </a>\r\n);\r\n\r\nexport default ImageItem;\r\n","import React from 'react';\r\nimport ImageItem from './ImageItem';\r\n\r\nclass Image extends React.Component {\r\n  render() {\r\n    const images = this.props.images.map(image => <ImageItem image={image} />);\r\n    return(\r\n        <div className =\"center-align downside-border\">\r\n            <h2 >Report Items</h2>\r\n            <div>\r\n                {images}\r\n            </div>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Image;\r\n","import React from 'react';\nimport Title from './Title';\nimport Bar from './Bar';\nimport Desc from './Desc';\nimport Button from './Button';\nimport Image from './Image';\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    items: [\n      { name: 'Search', web: \"#\" },\n      { name: 'Report', web: \"#\" },\n      { name: 'Location', web: \"#\" },\n      { name: 'Time', web: \"#\" }\n    ],\n\n    images: [\n      { width: 200, img: \"https://m.media-amazon.com/images/M/MV5BZDFhMWUxNzAtNjNhNi00MDM0LTljODItNjZjMTA3MjA2YzUwXkEyXkFqcGdeQXVyNDE5MTU2MDE@._V1_UY268_CR1,0,182,268_AL_.jpg\", web: \"#\", text: \"Report Lost\"},\n      { width: 300, img: \"http://www.salinayoon.com/FOUND_files/shapeimage_2.png\", web: \"#\", text: \"Report Found\"}\n    ]\n  };\n\n  render() {\n    return (\n      <div>\n        <Title/>\n        <Bar items={this.state.items}/>\n        <Button/>\n        <Desc/>\n        <Image images={this.state.images}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}